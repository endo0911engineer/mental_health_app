# ライブラリのインポート
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Embedding, Dropout
from tensorflow.keras.optimizers import Adam
import pickle
import matplotlib.pyplot as plt

# データセットの読み込み
import kagglehub
import os

# Download latest version
path = kagglehub.dataset_download("nelgiriyewithana/emotions")
csv_file_path = os.path.join(path, 'text.csv')
data = pd.read_csv(csv_file_path)

# 欠損値の確認と削除
data = data.dropna()

# テキストとラベルの取得
texts = data['text'].values
labels = data['label'].values

# テキストのトークン化
tokenizer = Tokenizer(num_words=5000)
tokenizer.fit_on_texts(texts)
X = tokenizer.texts_to_sequences(texts)

# シーケンスの長さを揃える
X = pad_sequences(X, maxlen=100)

# ラベルエンコーダーを使用してラベルを数値に変換
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(labels)

# モデルの定義
model = Sequential()

# 埋め込み層
model.add(Embedding(input_dim=5000, output_dim=128, input_length=100))

# LSTM層
model.add(LSTM(128, return_sequences=False))

# ドロップアウト層
model.add(Dropout(0.5))

# 出力層
model.add(Dense(6, activation='softmax'))  # 6クラスの分類

# モデルのコンパイル
model.compile(loss='sparse_categorical_crossentropy', optimizer=Adam(), metrics=['accuracy'])

# モデルの概要
model.summary()

# データの分割
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# モデルの訓練
history = model.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_test, y_test))

# 評価
loss, accuracy = model.evaluate(X_test, y_test, verbose=1)
print(f"Test Loss: {loss}")
print(f"Test Accuracy: {accuracy}")

# 予測
y_pred_prob = model.predict(X_test)
y_pred = np.argmax(y_pred_prob, axis=1)

# クラス名を手動で指定
class_names = ['sadness', 'joy', 'love', 'anger', 'fear', 'surprise']

# 精度レポート
print(classification_report(y_test, y_pred, target_names=class_names))

# 損失と精度のグラフ化
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend(loc='best')
plt.show()

plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend(loc='best')
plt.show()

# モデルの保存
model.save('trained_model.h5')  # TensorFlowモデルを.h5ファイルに保存
print("モデルを 'trained_model.h5' に保存しました。")

# トークナイザの保存
with open('tokenizer.pkl', 'wb') as f:
    pickle.dump(tokenizer, f)
print("トークナイザを 'tokenizer.pkl' に保存しました。")

# ラベルエンコーダーの保存（必要に応じて）
with open('label_encoder.pkl', 'wb') as f:
    pickle.dump(label_encoder, f)
print("ラベルエンコーダーを 'label_encoder.pkl' に保存しました。")